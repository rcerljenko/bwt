name: CMake CI

on:
 pull_request:
  types: [opened, synchronize, reopened, ready_for_review]

concurrency:
 group: ${{ github.ref }}
 cancel-in-progress: true

jobs:
 linux:
  if: github.event.pull_request.draft == false

  strategy:
   fail-fast: false
   matrix:
    compiler: [gcc, clang, icx]
    cpack: [false, true]

  runs-on: ubuntu-latest

  name: Linux - ${{ matrix.compiler }} ${{ matrix.cpack && '- CPack' || '' }}

  steps:
   - name: Pulling project
     uses: actions/checkout@v4

   - name: Add Intel APT repository
     if: ${{ matrix.compiler == 'icx' }}
     working-directory: ${{ runner.temp }}
     run: |
      wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
      sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
      rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
      sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
      sudo apt-get update

   - name: Install Intel oneAPI compiler
     if: ${{ matrix.compiler == 'icx' }}
     run: sudo apt-get install -y intel-oneapi-compiler-dpcpp-cpp

   - name: Setup Intel oneAPI environment
     if: ${{ matrix.compiler == 'icx' }}
     run: |
      source /opt/intel/oneapi/setvars.sh
      printenv >> $GITHUB_ENV

   - name: Setup CMake
     id: cmake
     env:
      CC: ${{ matrix.compiler }}
     uses: threeal/cmake-action@v2
     with:
      source-dir: src
      build-args: ${{ matrix.cpack && '--target package' || '' }}

   - name: Install
     if: ${{ ! matrix.cpack }}
     run: sudo cmake --install ${{ steps.cmake.outputs.build-dir }} --strip

   - name: Install with CPack
     if: ${{ matrix.cpack }}
     working-directory: ${{ steps.cmake.outputs.build-dir }}
     run: sudo dpkg -i pbwt-1.0.0-${{ runner.os }}.deb

   - name: Run program
     run: pbwt -h

   - name: Prepare for tests
     run: tar -c -f ${{ runner.temp }}/bwt.tar .

   - name: Compression test using FILE
     working-directory: ${{ runner.temp }}
     run: pbwt -p 9 bwt.tar -o bwt-file.tar.bwt

   - name: Compression test using STDIN
     working-directory: ${{ runner.temp }}
     run: cat bwt.tar | pbwt -p 9 -o bwt-stdin.tar.bwt

   - name: Compression test using STDOUT
     working-directory: ${{ runner.temp }}
     run: pbwt -p 9 -c bwt.tar > bwt-stdout.tar.bwt

   - name: Decompression test using FILE
     working-directory: ${{ runner.temp }}
     run: pbwt -d bwt-file.tar.bwt -o bwt-file.tar

   - name: Decompression test using STDIN file
     working-directory: ${{ runner.temp }}
     run: pbwt -d bwt-stdin.tar.bwt -o bwt-stdin.tar

   - name: Decompression test using STDOUT file
     working-directory: ${{ runner.temp }}
     run: pbwt -d bwt-stdout.tar.bwt -o bwt-stdout.tar

   - name: Compare decompressed files 1/3
     working-directory: ${{ runner.temp }}
     run: cmp -s bwt.tar bwt-file.tar

   - name: Compare decompressed files 2/3
     working-directory: ${{ runner.temp }}
     run: cmp -s bwt.tar bwt-stdin.tar

   - name: Compare decompressed files 3/3
     working-directory: ${{ runner.temp }}
     run: cmp -s bwt.tar bwt-stdout.tar

 macos:
  if: github.event.pull_request.draft == false

  strategy:
   fail-fast: false
   matrix:
    compiler: [gcc-14, clang]
    cpack: [false, true]

  runs-on: macos-latest

  name: MacOS - ${{ matrix.compiler }} ${{ matrix.cpack && '- CPack' || '' }}

  steps:
   - name: Pulling project
     uses: actions/checkout@v4

   - name: Setup CMake
     id: cmake
     env:
      CC: ${{ matrix.compiler }}
     uses: threeal/cmake-action@v2
     with:
      source-dir: src
      build-args: ${{ matrix.cpack && '--target package' || '' }}

   - name: Install
     if: ${{ ! matrix.cpack }}
     run: sudo cmake --install ${{ steps.cmake.outputs.build-dir }} --strip

   - name: Install with CPack
     if: ${{ matrix.cpack }}
     working-directory: ${{ steps.cmake.outputs.build-dir }}
     run: sudo installer -store -package pbwt-1.0.0-Darwin.pkg

   - name: Run program
     run: pbwt -h

 windows:
  if: github.event.pull_request.draft == false

  strategy:
   fail-fast: false
   matrix:
    include:
     - generator: ''
     - generator: 'MinGW Makefiles'
       compiler: gcc
     - generator: 'MinGW Makefiles'
       compiler: clang

  runs-on: windows-latest

  name: Windows - ${{ matrix.generator || 'Visual Studio' }} - ${{ matrix.compiler || 'MSVC' }}

  steps:
   - name: Pulling project
     uses: actions/checkout@v4

   - name: Setup CMake
     id: cmake
     uses: threeal/cmake-action@v2
     with:
      source-dir: src
      generator: ${{ matrix.generator }}
      args: ${{ matrix.compiler && format('-DCMAKE_C_COMPILER={0}', matrix.compiler) || '' }}
      build-args: --config Release

   - name: Install
     run: cmake --install ${{ steps.cmake.outputs.build-dir }} --config Release --strip

   - name: Run program
     working-directory: 'C:/Program Files (x86)/libbwt/bin'
     run: ./pbwt -h

   - name: Prepare for tests
     run: 7z a -ttar -r ${{ runner.temp }}\bwt.tar .

   - name: Compression test using FILE
     working-directory: 'C:/Program Files (x86)/libbwt/bin'
     run: ./pbwt -p 9 ${{ runner.temp }}\bwt.tar -o ${{ runner.temp }}\bwt-file.tar.bwt

   - name: Compression test using STDIN
     working-directory: 'C:/Program Files (x86)/libbwt/bin'
     run: type ${{ runner.temp }}\bwt.tar | ./pbwt -p 9 -o ${{ runner.temp }}\bwt-stdin.tar.bwt

   - name: Compression test using STDOUT
     working-directory: 'C:/Program Files (x86)/libbwt/bin'
     run: ./pbwt -p 9 -c ${{ runner.temp }}\bwt.tar > ${{ runner.temp }}\bwt-stdout.tar.bwt

   - name: Decompression test using FILE
     working-directory: 'C:/Program Files (x86)/libbwt/bin'
     run: ./pbwt -d ${{ runner.temp }}\bwt-file.tar.bwt -o ${{ runner.temp }}\bwt-file.tar

   - name: Decompression test using STDIN file
     working-directory: 'C:/Program Files (x86)/libbwt/bin'
     run: ./pbwt -d ${{ runner.temp }}\bwt-stdin.tar.bwt -o ${{ runner.temp }}\bwt-stdin.tar

   - name: Compare decompressed files
     working-directory: ${{ runner.temp }}
     run: fc.exe /b bwt.tar bwt-file.tar
